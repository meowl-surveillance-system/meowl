#!/bin/bash
PARENT_PATH=$(cd "$(dirname "${BASH_SOURCE[0]}")"; pwd -P)

# Print out welcome text
print_intro(){
  echo "Meowl: Open-Source Smart Surveillance System"
  echo "Thanks for trying out this system"
  echo "We need some information from you in this system to get things started:"
}

# Set up admin account for user
get_admin_info(){
  ADMIN_PASSWORD_1=password1
  ADMIN_PASSWORD_2=password2
  echo
  echo "Creating an adminstrator account for you:"
  read -p "Username: " ADMIN_USERNAME
  read -p "Email: " ADMIN_EMAIL
  while [[ ${ADMIN_PASSWORD_1} != ${ADMIN_PASSWORD_2} ]]
  do
    read -sp "Password: " ADMIN_PASSWORD_1
    echo
    read -sp "Re-enter your password: " ADMIN_PASSWORD_2
    echo
    if [[ ${ADMIN_PASSWORD_1} != ${ADMIN_PASSWORD_2} ]] 
    then
      echo "Sorry, try again."
    fi
  done
  ADMIN_PASSWORD=${ADMIN_PASSWORD_1}
  echo "Hello ${ADMIN_USERNAME}! We will enter in these details into our Cassandra database."
}

# Get email information from user
get_email_info(){
  MEOWL_PASSWORD_1=password1
  MEOWL_PASSWORD_2=password2
  echo
  echo "We will also need email credentials from you. This email will be used to send out emails to you when this system captures suspicious activities from the cameras you enter in"
  echo "Please do not use your own personal email address, but use a new email account with a strong password"
  read -p "Meowl Email: " MEOWL_EMAIL
  while [[ ${MEOWL_PASSWORD_1} != ${MEOWL_PASSWORD_2} ]]
  do
    read -sp "Password: " MEOWL_PASSWORD_1
    echo
    read -sp "Re-enter your password: " MEOWL_PASSWORD_2
    echo
    if [[ ${MEOWL_PASSWORD_1} != ${MEOWL_PASSWORD_2} ]] 
    then
      echo "Sorry, try again."
    fi
  done
  EMAIL_PASSWORD=${MEOWL_PASSWORD_1}
  EMAIL_ADDRESS=${MEOWL_EMAIL}
  echo "You have used ${MEOWL_EMAIL}. We will enter in these details into our notification services."
}

# Create credentials from user during startup
get_credentials(){
  print_intro
  get_admin_info
  get_email_info
}

# Use dev_install to install Kubernetes and Docker
# TODO: Use Kubernetes to orchestrate running Docker containers
install_docker(){
  ${PARENT_PATH}/dev_install kubernetes
}

remove_existing_containers(){
  echo 'Remove any existing containers...'
  sudo docker stop meowl-cv
  sudo docker rm meowl-cv
  sudo docker stop meowl-web
  sudo docker rm meowl-web
  sudo docker stop meowl-cass-app
  sudo docker rm meowl-cass-app
  sudo docker stop meowl-kafka
  sudo docker rm meowl-kafka
  sudo docker stop meowl-nginx-rtmp
  sudo docker rm meowl-nginx-rtmp
  sudo docker stop meowl-cass
  sudo docker rm meowl-cass
}

#######################################
# Deploy Meowl Images consecutively.
#
# Meowl Cassandra and Meowl Nginx RTMP Server are standalone services that every other
# service depends on. Meowl Cassandra App creates the tables for rest of the following
# services. Meowl Kafka is dependent on Cassandra for notification storage.
# Meowl Web Server is then created and Meowl CV App will take a while  
# to train and set up.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
deploy_images(){
  echo "Now building and running docker images... This will take a while (10 mins ~ on a good Internet)"
  sudo docker build  --tag meowl-cass:1.0 ${PARENT_PATH}/lib/cassandra
  sudo docker run --detach --publish 9043:9042 --name meowl-cass meowl-cass:1.0
  sudo docker build $(for i in `cat build.args`; do out+="--build-arg $i " ; done; echo $out;out="") --tag meowl-nginx-rtmp:1.0 ${PARENT_PATH}/lib/nginx-rtmp
  sudo docker run --detach --publish 8000:19350 -p 8008:80 -p 8088:443 -p 8080:8080 --name meowl-nginx-rtmp meowl-nginx-rtmp:1.0
  sudo docker build  --no-cache --build-arg ADMIN_USERNAME=${ADMIN_USERNAME} --build-arg ADMIN_PASSWORD=${ADMIN_PASSWORD} --build-arg ADMIN_EMAIL=${ADMIN_EMAIL} $(for i in `cat build.args`; do out+="--build-arg $i " ; done; echo $out;out="") --tag meowl-cass-app:1.0 ${PARENT_PATH}/db/cass
  sleep 5
  sudo docker run --detach --publish 5001:5000 --name meowl-cass-app meowl-cass-app:1.0
  sudo docker build --build-arg EMAIL_ADDRESS=${EMAIL_ADDRESS} --build-arg EMAIL_PASSWORD=${EMAIL_PASSWORD} $(for i in `cat build.args`; do out+="--build-arg $i " ; done; echo $out;out="") --tag meowl-kafka:1.0 ${PARENT_PATH}/kafka
  sudo docker run --detach --publish 9093:9092 --name meowl-kafka meowl-kafka:1.0
  sudo docker build --build-arg EMAIL_ADDRESS=${EMAIL_ADDRESS} --build-arg EMAIL_PASSWORD=${EMAIL_PASSWORD} $(for i in `cat build.args`; do out+="--build-arg $i " ; done; echo $out;out="") --tag meowl-web:1.0 ${PARENT_PATH}/web
  sudo docker run --detach --publish 8081:8081 --name meowl-web meowl-web:1.0  
  sudo docker build --build-arg ADMIN_USERNAME=${ADMIN_USERNAME} --build-arg ADMIN_PASSWORD=${ADMIN_PASSWORD} $(for i in `cat build.args`; do out+="--build-arg $i " ; done; echo $out;out="") --tag meowl-cv:1.0 ${PARENT_PATH}/cv
  sudo docker run --detach --publish 9000:9000 -e ADMIN_USERNAME=${ADMIN_USERNAME} -e ADMIN_PASSWORD=${ADMIN_PASSWORD} --name meowl-cv meowl-cv:1.0 
}

# Install Docker and deploy the new images from this repository
deploy(){
  install_docker
  remove_existing_containers
  ${PARENT_PATH}/build-args.sh
  deploy_images
}

# Get credentials for unique deployment
main(){
  get_credentials
  deploy
}

main
